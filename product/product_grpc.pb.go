// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: product/product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCProduct_QueryProductList_FullMethodName = "/product.RPCProduct/QueryProductList"
	RPCProduct_QueryProductById_FullMethodName = "/product.RPCProduct/QueryProductById"
)

// RPCProductClient is the client API for RPCProduct service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCProductClient interface {
	// 获取所有设备 edge s  c
	QueryProductList(ctx context.Context, in *QueryProductListRequest, opts ...grpc.CallOption) (*QueryProductListResponse, error)
	// 获取设备 edge s  c
	QueryProductById(ctx context.Context, in *QueryProductByIdRequest, opts ...grpc.CallOption) (*QueryProductByIdResponse, error)
}

type rPCProductClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCProductClient(cc grpc.ClientConnInterface) RPCProductClient {
	return &rPCProductClient{cc}
}

func (c *rPCProductClient) QueryProductList(ctx context.Context, in *QueryProductListRequest, opts ...grpc.CallOption) (*QueryProductListResponse, error) {
	out := new(QueryProductListResponse)
	err := c.cc.Invoke(ctx, RPCProduct_QueryProductList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCProductClient) QueryProductById(ctx context.Context, in *QueryProductByIdRequest, opts ...grpc.CallOption) (*QueryProductByIdResponse, error) {
	out := new(QueryProductByIdResponse)
	err := c.cc.Invoke(ctx, RPCProduct_QueryProductById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCProductServer is the server API for RPCProduct service.
// All implementations must embed UnimplementedRPCProductServer
// for forward compatibility
type RPCProductServer interface {
	// 获取所有设备 edge s  c
	QueryProductList(context.Context, *QueryProductListRequest) (*QueryProductListResponse, error)
	// 获取设备 edge s  c
	QueryProductById(context.Context, *QueryProductByIdRequest) (*QueryProductByIdResponse, error)
	mustEmbedUnimplementedRPCProductServer()
}

// UnimplementedRPCProductServer must be embedded to have forward compatible implementations.
type UnimplementedRPCProductServer struct {
}

func (UnimplementedRPCProductServer) QueryProductList(context.Context, *QueryProductListRequest) (*QueryProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductList not implemented")
}
func (UnimplementedRPCProductServer) QueryProductById(context.Context, *QueryProductByIdRequest) (*QueryProductByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProductById not implemented")
}
func (UnimplementedRPCProductServer) mustEmbedUnimplementedRPCProductServer() {}

// UnsafeRPCProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCProductServer will
// result in compilation errors.
type UnsafeRPCProductServer interface {
	mustEmbedUnimplementedRPCProductServer()
}

func RegisterRPCProductServer(s grpc.ServiceRegistrar, srv RPCProductServer) {
	s.RegisterService(&RPCProduct_ServiceDesc, srv)
}

func _RPCProduct_QueryProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCProductServer).QueryProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCProduct_QueryProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCProductServer).QueryProductList(ctx, req.(*QueryProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCProduct_QueryProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCProductServer).QueryProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCProduct_QueryProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCProductServer).QueryProductById(ctx, req.(*QueryProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCProduct_ServiceDesc is the grpc.ServiceDesc for RPCProduct service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCProduct_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.RPCProduct",
	HandlerType: (*RPCProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryProductList",
			Handler:    _RPCProduct_QueryProductList_Handler,
		},
		{
			MethodName: "QueryProductById",
			Handler:    _RPCProduct_QueryProductById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product/product.proto",
}
