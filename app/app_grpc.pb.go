// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: app/app.proto

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCApp_SendCommand_FullMethodName = "/app.RPCApp/SendCommand"
)

// RPCAppClient is the client API for RPCApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCAppClient interface {
	// 应用发送到平台
	SendCommand(ctx context.Context, in *AppSendCommandRequest, opts ...grpc.CallOption) (*AppSendCommandResponse, error)
}

type rPCAppClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCAppClient(cc grpc.ClientConnInterface) RPCAppClient {
	return &rPCAppClient{cc}
}

func (c *rPCAppClient) SendCommand(ctx context.Context, in *AppSendCommandRequest, opts ...grpc.CallOption) (*AppSendCommandResponse, error) {
	out := new(AppSendCommandResponse)
	err := c.cc.Invoke(ctx, RPCApp_SendCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAppServer is the server API for RPCApp service.
// All implementations must embed UnimplementedRPCAppServer
// for forward compatibility
type RPCAppServer interface {
	// 应用发送到平台
	SendCommand(context.Context, *AppSendCommandRequest) (*AppSendCommandResponse, error)
	mustEmbedUnimplementedRPCAppServer()
}

// UnimplementedRPCAppServer must be embedded to have forward compatible implementations.
type UnimplementedRPCAppServer struct {
}

func (UnimplementedRPCAppServer) SendCommand(context.Context, *AppSendCommandRequest) (*AppSendCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedRPCAppServer) mustEmbedUnimplementedRPCAppServer() {}

// UnsafeRPCAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCAppServer will
// result in compilation errors.
type UnsafeRPCAppServer interface {
	mustEmbedUnimplementedRPCAppServer()
}

func RegisterRPCAppServer(s grpc.ServiceRegistrar, srv RPCAppServer) {
	s.RegisterService(&RPCApp_ServiceDesc, srv)
}

func _RPCApp_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppSendCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAppServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCApp_SendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAppServer).SendCommand(ctx, req.(*AppSendCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCApp_ServiceDesc is the grpc.ServiceDesc for RPCApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.RPCApp",
	HandlerType: (*RPCAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommand",
			Handler:    _RPCApp_SendCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/app.proto",
}
