// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: thingmodel/thingmodel.proto

package thingmodel

import (
	context "context"
	common "github.com/ytuox/elink-plugin-proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCThingModel_ThingModelMsgUp_FullMethodName       = "/thingmodel.RPCThingModel/ThingModelMsgUp"
	RPCThingModel_ThingModelMsgDown_FullMethodName     = "/thingmodel.RPCThingModel/ThingModelMsgDown"
	RPCThingModel_QueryThingModelShadow_FullMethodName = "/thingmodel.RPCThingModel/QueryThingModelShadow"
)

// RPCThingModelClient is the client API for RPCThingModel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCThingModelClient interface {
	ThingModelMsgUp(ctx context.Context, in *ThingModelMsgUpRequest, opts ...grpc.CallOption) (*common.CommonResponse, error)
	ThingModelMsgDown(ctx context.Context, in *ThingModelMsgDownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QueryThingModelShadow(ctx context.Context, in *QueryThingModelShadowRequest, opts ...grpc.CallOption) (*QueryThingModelShadowResponse, error)
}

type rPCThingModelClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCThingModelClient(cc grpc.ClientConnInterface) RPCThingModelClient {
	return &rPCThingModelClient{cc}
}

func (c *rPCThingModelClient) ThingModelMsgUp(ctx context.Context, in *ThingModelMsgUpRequest, opts ...grpc.CallOption) (*common.CommonResponse, error) {
	out := new(common.CommonResponse)
	err := c.cc.Invoke(ctx, RPCThingModel_ThingModelMsgUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCThingModelClient) ThingModelMsgDown(ctx context.Context, in *ThingModelMsgDownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RPCThingModel_ThingModelMsgDown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCThingModelClient) QueryThingModelShadow(ctx context.Context, in *QueryThingModelShadowRequest, opts ...grpc.CallOption) (*QueryThingModelShadowResponse, error) {
	out := new(QueryThingModelShadowResponse)
	err := c.cc.Invoke(ctx, RPCThingModel_QueryThingModelShadow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCThingModelServer is the server API for RPCThingModel service.
// All implementations must embed UnimplementedRPCThingModelServer
// for forward compatibility
type RPCThingModelServer interface {
	ThingModelMsgUp(context.Context, *ThingModelMsgUpRequest) (*common.CommonResponse, error)
	ThingModelMsgDown(context.Context, *ThingModelMsgDownRequest) (*emptypb.Empty, error)
	QueryThingModelShadow(context.Context, *QueryThingModelShadowRequest) (*QueryThingModelShadowResponse, error)
	mustEmbedUnimplementedRPCThingModelServer()
}

// UnimplementedRPCThingModelServer must be embedded to have forward compatible implementations.
type UnimplementedRPCThingModelServer struct {
}

func (UnimplementedRPCThingModelServer) ThingModelMsgUp(context.Context, *ThingModelMsgUpRequest) (*common.CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThingModelMsgUp not implemented")
}
func (UnimplementedRPCThingModelServer) ThingModelMsgDown(context.Context, *ThingModelMsgDownRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThingModelMsgDown not implemented")
}
func (UnimplementedRPCThingModelServer) QueryThingModelShadow(context.Context, *QueryThingModelShadowRequest) (*QueryThingModelShadowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryThingModelShadow not implemented")
}
func (UnimplementedRPCThingModelServer) mustEmbedUnimplementedRPCThingModelServer() {}

// UnsafeRPCThingModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCThingModelServer will
// result in compilation errors.
type UnsafeRPCThingModelServer interface {
	mustEmbedUnimplementedRPCThingModelServer()
}

func RegisterRPCThingModelServer(s grpc.ServiceRegistrar, srv RPCThingModelServer) {
	s.RegisterService(&RPCThingModel_ServiceDesc, srv)
}

func _RPCThingModel_ThingModelMsgUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThingModelMsgUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCThingModelServer).ThingModelMsgUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCThingModel_ThingModelMsgUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCThingModelServer).ThingModelMsgUp(ctx, req.(*ThingModelMsgUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCThingModel_ThingModelMsgDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThingModelMsgDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCThingModelServer).ThingModelMsgDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCThingModel_ThingModelMsgDown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCThingModelServer).ThingModelMsgDown(ctx, req.(*ThingModelMsgDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCThingModel_QueryThingModelShadow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryThingModelShadowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCThingModelServer).QueryThingModelShadow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCThingModel_QueryThingModelShadow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCThingModelServer).QueryThingModelShadow(ctx, req.(*QueryThingModelShadowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCThingModel_ServiceDesc is the grpc.ServiceDesc for RPCThingModel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCThingModel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thingmodel.RPCThingModel",
	HandlerType: (*RPCThingModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ThingModelMsgUp",
			Handler:    _RPCThingModel_ThingModelMsgUp_Handler,
		},
		{
			MethodName: "ThingModelMsgDown",
			Handler:    _RPCThingModel_ThingModelMsgDown_Handler,
		},
		{
			MethodName: "QueryThingModelShadow",
			Handler:    _RPCThingModel_QueryThingModelShadow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thingmodel/thingmodel.proto",
}
