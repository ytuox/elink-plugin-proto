// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: appcallback/appcallback.proto

package appcallback

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppCallBackService_AppStatusCallback_FullMethodName = "/appcallback.AppCallBackService/AppStatusCallback"
)

// AppCallBackServiceClient is the client API for AppCallBackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppCallBackServiceClient interface {
	// 云实例状态回调 edge = c  = s
	AppStatusCallback(ctx context.Context, in *AppStatusCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type appCallBackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppCallBackServiceClient(cc grpc.ClientConnInterface) AppCallBackServiceClient {
	return &appCallBackServiceClient{cc}
}

func (c *appCallBackServiceClient) AppStatusCallback(ctx context.Context, in *AppStatusCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppCallBackService_AppStatusCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppCallBackServiceServer is the server API for AppCallBackService service.
// All implementations must embed UnimplementedAppCallBackServiceServer
// for forward compatibility
type AppCallBackServiceServer interface {
	// 云实例状态回调 edge = c  = s
	AppStatusCallback(context.Context, *AppStatusCallbackRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAppCallBackServiceServer()
}

// UnimplementedAppCallBackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppCallBackServiceServer struct {
}

func (UnimplementedAppCallBackServiceServer) AppStatusCallback(context.Context, *AppStatusCallbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppStatusCallback not implemented")
}
func (UnimplementedAppCallBackServiceServer) mustEmbedUnimplementedAppCallBackServiceServer() {}

// UnsafeAppCallBackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppCallBackServiceServer will
// result in compilation errors.
type UnsafeAppCallBackServiceServer interface {
	mustEmbedUnimplementedAppCallBackServiceServer()
}

func RegisterAppCallBackServiceServer(s grpc.ServiceRegistrar, srv AppCallBackServiceServer) {
	s.RegisterService(&AppCallBackService_ServiceDesc, srv)
}

func _AppCallBackService_AppStatusCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppStatusCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCallBackServiceServer).AppStatusCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppCallBackService_AppStatusCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCallBackServiceServer).AppStatusCallback(ctx, req.(*AppStatusCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppCallBackService_ServiceDesc is the grpc.ServiceDesc for AppCallBackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppCallBackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appcallback.AppCallBackService",
	HandlerType: (*AppCallBackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppStatusCallback",
			Handler:    _AppCallBackService_AppStatusCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appcallback/appcallback.proto",
}
